version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gefylen-quiz-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gefylen_quiz}
      POSTGRES_USER: ${POSTGRES_USER:-gefylen_quiz_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gefylen_quiz_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gefylen_quiz_user} -d ${POSTGRES_DB:-gefylen_quiz}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: gefylen-quiz-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-gefylen_quiz_user}:${POSTGRES_PASSWORD:-gefylen_quiz_password}@postgres:5432/${POSTGRES_DB:-gefylen_quiz}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gefylen-quiz-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000/api
    ports:
      - "3001:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data: 